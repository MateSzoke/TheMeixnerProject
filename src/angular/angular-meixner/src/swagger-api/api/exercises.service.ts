/**
 * The Meixner Project
 * The REST API of the Meixner education project
 *
 * OpenAPI spec version: 1.0
 * Contact: mate.szoke2@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs';

import {ExerciseRequest} from '../model/exerciseRequest';
import {ExercisesResponse} from '../model/exercisesResponse';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ExercisesService {

    protected basePath = 'http://meixner.herokuapp.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add task to an exercises group by id
     *
     * @param exercisesId exercisesId
     * @param taskId taskId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTaskToExercisesUsingPOST(exercisesId: number, taskId: number, observe?: 'body', reportProgress?: boolean): Observable<ExercisesResponse>;
    public addTaskToExercisesUsingPOST(exercisesId: number, taskId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExercisesResponse>>;
    public addTaskToExercisesUsingPOST(exercisesId: number, taskId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExercisesResponse>>;
    public addTaskToExercisesUsingPOST(exercisesId: number, taskId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (exercisesId === null || exercisesId === undefined) {
            throw new Error('Required parameter exercisesId was null or undefined when calling addTaskToExercisesUsingPOST.');
        }
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling addTaskToExercisesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ExercisesResponse>(`${this.configuration.basePath}/exercises/${encodeURIComponent(String(exercisesId))}/${encodeURIComponent(String(taskId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new exercises group
     *
     * @param exerciseRequest exerciseRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createExercisesUsingPOST(exerciseRequest: ExerciseRequest, observe?: 'body', reportProgress?: boolean): Observable<ExercisesResponse>;
    public createExercisesUsingPOST(exerciseRequest: ExerciseRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExercisesResponse>>;
    public createExercisesUsingPOST(exerciseRequest: ExerciseRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExercisesResponse>>;
    public createExercisesUsingPOST(exerciseRequest: ExerciseRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (exerciseRequest === null || exerciseRequest === undefined) {
            throw new Error('Required parameter exerciseRequest was null or undefined when calling createExercisesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ExercisesResponse>(`${this.configuration.basePath}/exercises/create`,
            exerciseRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete exercise group by id
     *
     * @param exercisesId exercisesId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteExercisesUsingDELETE(exercisesId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteExercisesUsingDELETE(exercisesId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteExercisesUsingDELETE(exercisesId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteExercisesUsingDELETE(exercisesId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (exercisesId === null || exercisesId === undefined) {
            throw new Error('Required parameter exercisesId was null or undefined when calling deleteExercisesUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/exercises/delete/${encodeURIComponent(String(exercisesId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the exercises group by exercisesId
     *
     * @param exercisesId exercisesId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExercisesByIdUsingGET(exercisesId: number, observe?: 'body', reportProgress?: boolean): Observable<ExercisesResponse>;
    public getExercisesByIdUsingGET(exercisesId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExercisesResponse>>;
    public getExercisesByIdUsingGET(exercisesId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExercisesResponse>>;
    public getExercisesByIdUsingGET(exercisesId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (exercisesId === null || exercisesId === undefined) {
            throw new Error('Required parameter exercisesId was null or undefined when calling getExercisesByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ExercisesResponse>(`${this.configuration.basePath}/exercises/${encodeURIComponent(String(exercisesId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get exercises of the current user
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMyExercisesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<ExercisesResponse>>;
    public getMyExercisesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExercisesResponse>>>;
    public getMyExercisesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExercisesResponse>>>;
    public getMyExercisesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (apiKey) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ExercisesResponse>>(`${this.configuration.basePath}/exercises/myExercises`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove task from an exercises group by id
     *
     * @param exercisesId exercisesId
     * @param taskId taskId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTaskFromExercisesUsingDELETE(exercisesId: number, taskId: number, observe?: 'body', reportProgress?: boolean): Observable<ExercisesResponse>;
    public removeTaskFromExercisesUsingDELETE(exercisesId: number, taskId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExercisesResponse>>;
    public removeTaskFromExercisesUsingDELETE(exercisesId: number, taskId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExercisesResponse>>;
    public removeTaskFromExercisesUsingDELETE(exercisesId: number, taskId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (exercisesId === null || exercisesId === undefined) {
            throw new Error('Required parameter exercisesId was null or undefined when calling removeTaskFromExercisesUsingDELETE.');
        }
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling removeTaskFromExercisesUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ExercisesResponse>(`${this.configuration.basePath}/exercises/${encodeURIComponent(String(exercisesId))}/${encodeURIComponent(String(taskId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing exercises group
     *
     * @param exercisesId exercisesId
     * @param exerciseRequest exerciseRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateExercisesUsingPATCH(exercisesId: number, exerciseRequest: ExerciseRequest, observe?: 'body', reportProgress?: boolean): Observable<ExercisesResponse>;
    public updateExercisesUsingPATCH(exercisesId: number, exerciseRequest: ExerciseRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExercisesResponse>>;
    public updateExercisesUsingPATCH(exercisesId: number, exerciseRequest: ExerciseRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExercisesResponse>>;
    public updateExercisesUsingPATCH(exercisesId: number, exerciseRequest: ExerciseRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (exercisesId === null || exercisesId === undefined) {
            throw new Error('Required parameter exercisesId was null or undefined when calling updateExercisesUsingPATCH.');
        }
        if (exerciseRequest === null || exerciseRequest === undefined) {
            throw new Error('Required parameter exerciseRequest was null or undefined when calling updateExercisesUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<ExercisesResponse>(`${this.configuration.basePath}/exercises/update/${encodeURIComponent(String(exercisesId))}`,
            exerciseRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
