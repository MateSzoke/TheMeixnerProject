/**
 * The Meixner Project
 * The REST API of the Meixner education project
 *
 * OpenAPI spec version: 1.0
 * Contact: mate.szoke2@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs';

import {ExerciseResult} from '../model/exerciseResult';
import {StudentResponse} from '../model/studentResponse';
import {TaskResultResponse} from '../model/taskResultResponse';
import {UserResponse} from '../model/userResponse';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ResultsService {

  protected basePath = 'https://meixner.herokuapp.com';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

      if (configuration) {
        this.configuration = configuration;
        this.configuration.basePath = configuration.basePath || basePath || this.basePath;

      } else {
        this.configuration.basePath = basePath || this.basePath;
      }
    }

  /**
   * Add exercise to a user by id
   *
   * @param exercisesId exercisesId
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addExercisesToUserUsingPOST(exercisesId: number, userId: number, observe?: 'body', reportProgress?: boolean): Observable<StudentResponse>;

  public addExercisesToUserUsingPOST(exercisesId: number, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentResponse>>;

  public addExercisesToUserUsingPOST(exercisesId: number, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentResponse>>;

  public addExercisesToUserUsingPOST(exercisesId: number, userId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (exercisesId === null || exercisesId === undefined) {
      throw new Error('Required parameter exercisesId was null or undefined when calling addExercisesToUserUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling addExercisesToUserUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.post<StudentResponse>(`${this.configuration.basePath}/results/exercises/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(exercisesId))}`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Change class level to a student by user id
   *
   * @param classLevel classLevel
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public changeClassLevelByUserIdUsingPOST(classLevel: number, userId: number, observe?: 'body', reportProgress?: boolean): Observable<StudentResponse>;

  public changeClassLevelByUserIdUsingPOST(classLevel: number, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentResponse>>;

  public changeClassLevelByUserIdUsingPOST(classLevel: number, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentResponse>>;

  public changeClassLevelByUserIdUsingPOST(classLevel: number, userId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (classLevel === null || classLevel === undefined) {
      throw new Error('Required parameter classLevel was null or undefined when calling changeClassLevelByUserIdUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling changeClassLevelByUserIdUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.post<StudentResponse>(`${this.configuration.basePath}/results/classLevel/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(classLevel))}`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete student and user by user id
   *
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteUserByIdUsingDELETE(userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;

  public deleteUserByIdUsingDELETE(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;

  public deleteUserByIdUsingDELETE(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;

  public deleteUserByIdUsingDELETE(userId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling deleteUserByIdUsingDELETE.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<any>(`${this.configuration.basePath}/results/student/${encodeURIComponent(String(userId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get all students
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllStudentsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<StudentResponse>>;

  public getAllStudentsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StudentResponse>>>;

  public getAllStudentsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StudentResponse>>>;

  public getAllStudentsUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<StudentResponse>>(`${this.configuration.basePath}/results/students`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get all users
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllUsersUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<UserResponse>>;

  public getAllUsersUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserResponse>>>;

  public getAllUsersUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserResponse>>>;

  public getAllUsersUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<UserResponse>>(`${this.configuration.basePath}/results/users`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get my results as student
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMyResultsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<ExerciseResult>>;

  public getMyResultsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExerciseResult>>>;

  public getMyResultsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExerciseResult>>>;

  public getMyResultsUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ExerciseResult>>(`${this.configuration.basePath}/results/my`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get all results from student by userId
   *
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getResultsByUserIdUsingGET(userId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TaskResultResponse>>;

  public getResultsByUserIdUsingGET(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TaskResultResponse>>>;

  public getResultsByUserIdUsingGET(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TaskResultResponse>>>;

  public getResultsByUserIdUsingGET(userId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling getResultsByUserIdUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<TaskResultResponse>>(`${this.configuration.basePath}/results/${encodeURIComponent(String(userId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get all student&#39;s all results
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getResultsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TaskResultResponse>>;

  public getResultsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TaskResultResponse>>>;

  public getResultsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TaskResultResponse>>>;

  public getResultsUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<TaskResultResponse>>(`${this.configuration.basePath}/results/all`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get results of a solved exercise by started exercise id
   *
   * @param solvedExerciseId solvedExerciseId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSolvedExerciseResultsUsingGET(solvedExerciseId: number, observe?: 'body', reportProgress?: boolean): Observable<ExerciseResult>;

  public getSolvedExerciseResultsUsingGET(solvedExerciseId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExerciseResult>>;

  public getSolvedExerciseResultsUsingGET(solvedExerciseId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExerciseResult>>;

  public getSolvedExerciseResultsUsingGET(solvedExerciseId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (solvedExerciseId === null || solvedExerciseId === undefined) {
      throw new Error('Required parameter solvedExerciseId was null or undefined when calling getSolvedExerciseResultsUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<ExerciseResult>(`${this.configuration.basePath}/results/solved/${encodeURIComponent(String(solvedExerciseId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get student by user id
   *
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getStudentByIdUsingGET(userId: number, observe?: 'body', reportProgress?: boolean): Observable<StudentResponse>;

  public getStudentByIdUsingGET(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentResponse>>;

  public getStudentByIdUsingGET(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentResponse>>;

  public getStudentByIdUsingGET(userId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling getStudentByIdUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<StudentResponse>(`${this.configuration.basePath}/results/students/${encodeURIComponent(String(userId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Remove exercise from a user by id
   *
   * @param exercisesId exercisesId
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public removeExercisesFromUserUsingDELETE(exercisesId: number, userId: number, observe?: 'body', reportProgress?: boolean): Observable<StudentResponse>;

  public removeExercisesFromUserUsingDELETE(exercisesId: number, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentResponse>>;

  public removeExercisesFromUserUsingDELETE(exercisesId: number, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentResponse>>;

  public removeExercisesFromUserUsingDELETE(exercisesId: number, userId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (exercisesId === null || exercisesId === undefined) {
      throw new Error('Required parameter exercisesId was null or undefined when calling removeExercisesFromUserUsingDELETE.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling removeExercisesFromUserUsingDELETE.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<StudentResponse>(`${this.configuration.basePath}/results/exercises/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(exercisesId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
