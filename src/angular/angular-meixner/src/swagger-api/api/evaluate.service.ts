/**
 * The Meixner Project
 * The REST API of the Meixner education project
 *
 * OpenAPI spec version: 1.0
 * Contact: mate.szoke2@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs';

import {GroupingRequest} from '../model/groupingRequest';
import {MemoryGameRequest} from '../model/memoryGameRequest';
import {PairingRequest} from '../model/pairingRequest';
import {SentenceCompletionRequest} from '../model/sentenceCompletionRequest';
import {SentenceCreationRequest} from '../model/sentenceCreationRequest';
import {SortingRequest} from '../model/sortingRequest';
import {TaskResultResponse} from '../model/taskResultResponse';
import {TrueFalseRequest} from '../model/trueFalseRequest';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class EvaluateService {

  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  protected basePath = 'https://meixner.herokuapp.com';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

    if (configuration) {
      this.configuration = configuration;
      this.configuration.basePath = configuration.basePath || basePath || this.basePath;

    } else {
      this.configuration.basePath = basePath || this.basePath;
    }
  }

  /**
   * Evaluate grouping request by taskId to a student by user id
   *
   * @param taskId taskId
   * @param userId userId
   * @param groupingRequest taskRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public evaluateGroupingUsingPOST(taskId: number, userId: number, groupingRequest: GroupingRequest, observe?: 'body', reportProgress?: boolean): Observable<TaskResultResponse>;

  public evaluateGroupingUsingPOST(taskId: number, userId: number, groupingRequest: GroupingRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskResultResponse>>;

  public evaluateGroupingUsingPOST(taskId: number, userId: number, groupingRequest: GroupingRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskResultResponse>>;

  public evaluateGroupingUsingPOST(taskId: number, userId: number, groupingRequest: GroupingRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error('Required parameter taskId was null or undefined when calling evaluateGroupingUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling evaluateGroupingUsingPOST.');
    }
    if (groupingRequest === null || groupingRequest === undefined) {
      throw new Error('Required parameter groupingRequest was null or undefined when calling evaluateGroupingUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TaskResultResponse>(`${this.configuration.basePath}/evaluate/grouping/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(taskId))}`,
      groupingRequest,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Evaluate memory game request by taskId to a student by user id
   *
   * @param taskId taskId
   * @param userId userId
   * @param memoryGameRequest taskRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public evaluateMemoryGameUsingPOST(taskId: number, userId: number, memoryGameRequest: MemoryGameRequest, observe?: 'body', reportProgress?: boolean): Observable<TaskResultResponse>;

  public evaluateMemoryGameUsingPOST(taskId: number, userId: number, memoryGameRequest: MemoryGameRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskResultResponse>>;

  public evaluateMemoryGameUsingPOST(taskId: number, userId: number, memoryGameRequest: MemoryGameRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskResultResponse>>;

  public evaluateMemoryGameUsingPOST(taskId: number, userId: number, memoryGameRequest: MemoryGameRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error('Required parameter taskId was null or undefined when calling evaluateMemoryGameUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling evaluateMemoryGameUsingPOST.');
    }
    if (memoryGameRequest === null || memoryGameRequest === undefined) {
      throw new Error('Required parameter memoryGameRequest was null or undefined when calling evaluateMemoryGameUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TaskResultResponse>(`${this.configuration.basePath}/evaluate/memory/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(taskId))}`,
      memoryGameRequest,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Evaluate pairing request by taskId to a student by user id
   *
   * @param taskId taskId
   * @param userId userId
   * @param pairingRequest taskRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public evaluatePairingUsingPOST(taskId: number, userId: number, pairingRequest: PairingRequest, observe?: 'body', reportProgress?: boolean): Observable<TaskResultResponse>;

  public evaluatePairingUsingPOST(taskId: number, userId: number, pairingRequest: PairingRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskResultResponse>>;

  public evaluatePairingUsingPOST(taskId: number, userId: number, pairingRequest: PairingRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskResultResponse>>;

  public evaluatePairingUsingPOST(taskId: number, userId: number, pairingRequest: PairingRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error('Required parameter taskId was null or undefined when calling evaluatePairingUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling evaluatePairingUsingPOST.');
    }
    if (pairingRequest === null || pairingRequest === undefined) {
      throw new Error('Required parameter pairingRequest was null or undefined when calling evaluatePairingUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TaskResultResponse>(`${this.configuration.basePath}/evaluate/pairing/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(taskId))}`,
      pairingRequest,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Evaluate sentence completion request by taskId to a student by user id
   *
   * @param taskId taskId
   * @param userId userId
   * @param sentenceCompletionRequest taskRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public evaluateSentenceCompletionUsingPOST(taskId: number, userId: number, sentenceCompletionRequest: SentenceCompletionRequest, observe?: 'body', reportProgress?: boolean): Observable<TaskResultResponse>;

  public evaluateSentenceCompletionUsingPOST(taskId: number, userId: number, sentenceCompletionRequest: SentenceCompletionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskResultResponse>>;

  public evaluateSentenceCompletionUsingPOST(taskId: number, userId: number, sentenceCompletionRequest: SentenceCompletionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskResultResponse>>;

  public evaluateSentenceCompletionUsingPOST(taskId: number, userId: number, sentenceCompletionRequest: SentenceCompletionRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error('Required parameter taskId was null or undefined when calling evaluateSentenceCompletionUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling evaluateSentenceCompletionUsingPOST.');
    }
    if (sentenceCompletionRequest === null || sentenceCompletionRequest === undefined) {
      throw new Error('Required parameter sentenceCompletionRequest was null or undefined when calling evaluateSentenceCompletionUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TaskResultResponse>(`${this.configuration.basePath}/evaluate/sentenceCompletion/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(taskId))}`,
      sentenceCompletionRequest,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Evaluate sentence creation request by taskId to a student by user id
   *
   * @param taskId taskId
   * @param userId userId
   * @param sentenceCreationRequest taskRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public evaluateSentenceCreationUsingPOST(taskId: number, userId: number, sentenceCreationRequest: SentenceCreationRequest, observe?: 'body', reportProgress?: boolean): Observable<TaskResultResponse>;

  public evaluateSentenceCreationUsingPOST(taskId: number, userId: number, sentenceCreationRequest: SentenceCreationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskResultResponse>>;

  public evaluateSentenceCreationUsingPOST(taskId: number, userId: number, sentenceCreationRequest: SentenceCreationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskResultResponse>>;

  public evaluateSentenceCreationUsingPOST(taskId: number, userId: number, sentenceCreationRequest: SentenceCreationRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error('Required parameter taskId was null or undefined when calling evaluateSentenceCreationUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling evaluateSentenceCreationUsingPOST.');
    }
    if (sentenceCreationRequest === null || sentenceCreationRequest === undefined) {
      throw new Error('Required parameter sentenceCreationRequest was null or undefined when calling evaluateSentenceCreationUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TaskResultResponse>(`${this.configuration.basePath}/evaluate/sentenceCreation/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(taskId))}`,
      sentenceCreationRequest,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Evaluate sorting request by taskId to a student by user id
   *
   * @param taskId taskId
   * @param userId userId
   * @param sortingRequest taskRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public evaluateSortingUsingPOST(taskId: number, userId: number, sortingRequest: SortingRequest, observe?: 'body', reportProgress?: boolean): Observable<TaskResultResponse>;

  public evaluateSortingUsingPOST(taskId: number, userId: number, sortingRequest: SortingRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskResultResponse>>;

  public evaluateSortingUsingPOST(taskId: number, userId: number, sortingRequest: SortingRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskResultResponse>>;

  public evaluateSortingUsingPOST(taskId: number, userId: number, sortingRequest: SortingRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error('Required parameter taskId was null or undefined when calling evaluateSortingUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling evaluateSortingUsingPOST.');
    }
    if (sortingRequest === null || sortingRequest === undefined) {
      throw new Error('Required parameter sortingRequest was null or undefined when calling evaluateSortingUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TaskResultResponse>(`${this.configuration.basePath}/evaluate/sorting/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(taskId))}`,
      sortingRequest,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Evaluate true false request by taskId to a student by user id
   *
   * @param taskId taskId
   * @param userId userId
   * @param trueFalseRequest taskRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public evaluateTrueFalseUsingPOST(taskId: number, userId: number, trueFalseRequest: TrueFalseRequest, observe?: 'body', reportProgress?: boolean): Observable<TaskResultResponse>;

  public evaluateTrueFalseUsingPOST(taskId: number, userId: number, trueFalseRequest: TrueFalseRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskResultResponse>>;

  public evaluateTrueFalseUsingPOST(taskId: number, userId: number, trueFalseRequest: TrueFalseRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskResultResponse>>;

  public evaluateTrueFalseUsingPOST(taskId: number, userId: number, trueFalseRequest: TrueFalseRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error('Required parameter taskId was null or undefined when calling evaluateTrueFalseUsingPOST.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling evaluateTrueFalseUsingPOST.');
    }
    if (trueFalseRequest === null || trueFalseRequest === undefined) {
      throw new Error('Required parameter trueFalseRequest was null or undefined when calling evaluateTrueFalseUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TaskResultResponse>(`${this.configuration.basePath}/evaluate/truefalse/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(taskId))}`,
      trueFalseRequest,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
