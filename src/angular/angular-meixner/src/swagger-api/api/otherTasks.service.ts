/**
 * The Meixner Project
 * The REST API of the Meixner education project
 *
 * OpenAPI spec version: 1.0
 * Contact: mate.szoke2@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BlindMapRequest } from '../model/blindMapRequest';
import { BlindMapResponse } from '../model/blindMapResponse';
import { FreeTextRequest } from '../model/freeTextRequest';
import { FreeTextResponse } from '../model/freeTextResponse';
import { OddOneOutRequest } from '../model/oddOneOutRequest';
import { OddOneOutResponse } from '../model/oddOneOutResponse';
import { TableRequest } from '../model/tableRequest';
import { TableResponse } from '../model/tableResponse';
import { TimelineRequest } from '../model/timelineRequest';
import { TimelineResponse } from '../model/timelineResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class OtherTasksService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a new Blind map task.
     *
     * @param blindMapRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createBlindMapUsingPOST(blindMapRequest: BlindMapRequest, observe?: 'body', reportProgress?: boolean): Observable<BlindMapResponse>;
    public createBlindMapUsingPOST(blindMapRequest: BlindMapRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BlindMapResponse>>;
    public createBlindMapUsingPOST(blindMapRequest: BlindMapRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BlindMapResponse>>;
    public createBlindMapUsingPOST(blindMapRequest: BlindMapRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (blindMapRequest === null || blindMapRequest === undefined) {
            throw new Error('Required parameter blindMapRequest was null or undefined when calling createBlindMapUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BlindMapResponse>(`${this.configuration.basePath}/tasks/blindMap`,
            blindMapRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new Free Text task.
     *
     * @param freeTextRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createFreeTextUsingPOST(freeTextRequest: FreeTextRequest, observe?: 'body', reportProgress?: boolean): Observable<FreeTextResponse>;
    public createFreeTextUsingPOST(freeTextRequest: FreeTextRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FreeTextResponse>>;
    public createFreeTextUsingPOST(freeTextRequest: FreeTextRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FreeTextResponse>>;
    public createFreeTextUsingPOST(freeTextRequest: FreeTextRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (freeTextRequest === null || freeTextRequest === undefined) {
            throw new Error('Required parameter freeTextRequest was null or undefined when calling createFreeTextUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<FreeTextResponse>(`${this.configuration.basePath}/tasks/freeText`,
            freeTextRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new Odd One Out task.
     *
     * @param oddOneOutRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOddOneOutUsingPOST(oddOneOutRequest: OddOneOutRequest, observe?: 'body', reportProgress?: boolean): Observable<OddOneOutResponse>;
    public createOddOneOutUsingPOST(oddOneOutRequest: OddOneOutRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OddOneOutResponse>>;
    public createOddOneOutUsingPOST(oddOneOutRequest: OddOneOutRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OddOneOutResponse>>;
    public createOddOneOutUsingPOST(oddOneOutRequest: OddOneOutRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (oddOneOutRequest === null || oddOneOutRequest === undefined) {
            throw new Error('Required parameter oddOneOutRequest was null or undefined when calling createOddOneOutUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OddOneOutResponse>(`${this.configuration.basePath}/tasks/oddOneOut`,
            oddOneOutRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new Table task.
     *
     * @param tableRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTableUsingPOST(tableRequest: TableRequest, observe?: 'body', reportProgress?: boolean): Observable<TableResponse>;
    public createTableUsingPOST(tableRequest: TableRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TableResponse>>;
    public createTableUsingPOST(tableRequest: TableRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TableResponse>>;
    public createTableUsingPOST(tableRequest: TableRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tableRequest === null || tableRequest === undefined) {
            throw new Error('Required parameter tableRequest was null or undefined when calling createTableUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TableResponse>(`${this.configuration.basePath}/tasks/table`,
            tableRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a Timeline task.
     *
     * @param timelineRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTimelineUsingPOST(timelineRequest: TimelineRequest, observe?: 'body', reportProgress?: boolean): Observable<TimelineResponse>;
    public createTimelineUsingPOST(timelineRequest: TimelineRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TimelineResponse>>;
    public createTimelineUsingPOST(timelineRequest: TimelineRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TimelineResponse>>;
    public createTimelineUsingPOST(timelineRequest: TimelineRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (timelineRequest === null || timelineRequest === undefined) {
            throw new Error('Required parameter timelineRequest was null or undefined when calling createTimelineUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TimelineResponse>(`${this.configuration.basePath}/tasks/timeline`,
            timelineRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates existing Blind map task by taskId.
     *
     * @param taskId taskId
     * @param blindMapRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBlindMapByIdUsingPATCH(taskId: number, blindMapRequest: BlindMapRequest, observe?: 'body', reportProgress?: boolean): Observable<BlindMapResponse>;
    public updateBlindMapByIdUsingPATCH(taskId: number, blindMapRequest: BlindMapRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BlindMapResponse>>;
    public updateBlindMapByIdUsingPATCH(taskId: number, blindMapRequest: BlindMapRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BlindMapResponse>>;
    public updateBlindMapByIdUsingPATCH(taskId: number, blindMapRequest: BlindMapRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling updateBlindMapByIdUsingPATCH.');
        }
        if (blindMapRequest === null || blindMapRequest === undefined) {
            throw new Error('Required parameter blindMapRequest was null or undefined when calling updateBlindMapByIdUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<BlindMapResponse>(`${this.configuration.basePath}/tasks/blindMap/${encodeURIComponent(String(taskId))}`,
            blindMapRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates existing Odd One Out task by taskId.
     *
     * @param taskId taskId
     * @param oddOneOutRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBlindMapByIdUsingPATCH1(taskId: number, oddOneOutRequest: OddOneOutRequest, observe?: 'body', reportProgress?: boolean): Observable<OddOneOutResponse>;
    public updateBlindMapByIdUsingPATCH1(taskId: number, oddOneOutRequest: OddOneOutRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OddOneOutResponse>>;
    public updateBlindMapByIdUsingPATCH1(taskId: number, oddOneOutRequest: OddOneOutRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OddOneOutResponse>>;
    public updateBlindMapByIdUsingPATCH1(taskId: number, oddOneOutRequest: OddOneOutRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling updateBlindMapByIdUsingPATCH1.');
        }
        if (oddOneOutRequest === null || oddOneOutRequest === undefined) {
            throw new Error('Required parameter oddOneOutRequest was null or undefined when calling updateBlindMapByIdUsingPATCH1.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<OddOneOutResponse>(`${this.configuration.basePath}/tasks/oddOneOut/${encodeURIComponent(String(taskId))}`,
            oddOneOutRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates existing Free Text task by taskId.
     *
     * @param taskId taskId
     * @param freeTextRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFreeTextByIdUsingPATCH(taskId: number, freeTextRequest: FreeTextRequest, observe?: 'body', reportProgress?: boolean): Observable<FreeTextResponse>;
    public updateFreeTextByIdUsingPATCH(taskId: number, freeTextRequest: FreeTextRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FreeTextResponse>>;
    public updateFreeTextByIdUsingPATCH(taskId: number, freeTextRequest: FreeTextRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FreeTextResponse>>;
    public updateFreeTextByIdUsingPATCH(taskId: number, freeTextRequest: FreeTextRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling updateFreeTextByIdUsingPATCH.');
        }
        if (freeTextRequest === null || freeTextRequest === undefined) {
            throw new Error('Required parameter freeTextRequest was null or undefined when calling updateFreeTextByIdUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<FreeTextResponse>(`${this.configuration.basePath}/tasks/freeText/${encodeURIComponent(String(taskId))}`,
            freeTextRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates existing Table task by taskId.
     *
     * @param taskId taskId
     * @param tableRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTableByIdUsingPATCH(taskId: number, tableRequest: TableRequest, observe?: 'body', reportProgress?: boolean): Observable<TableResponse>;
    public updateTableByIdUsingPATCH(taskId: number, tableRequest: TableRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TableResponse>>;
    public updateTableByIdUsingPATCH(taskId: number, tableRequest: TableRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TableResponse>>;
    public updateTableByIdUsingPATCH(taskId: number, tableRequest: TableRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling updateTableByIdUsingPATCH.');
        }
        if (tableRequest === null || tableRequest === undefined) {
            throw new Error('Required parameter tableRequest was null or undefined when calling updateTableByIdUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<TableResponse>(`${this.configuration.basePath}/tasks/table/${encodeURIComponent(String(taskId))}`,
            tableRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates existing Timeline task by taskId.
     *
     * @param taskId taskId
     * @param timelineRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTimelineByIdUsingPATCH(taskId: number, timelineRequest: TimelineRequest, observe?: 'body', reportProgress?: boolean): Observable<TimelineResponse>;
    public updateTimelineByIdUsingPATCH(taskId: number, timelineRequest: TimelineRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TimelineResponse>>;
    public updateTimelineByIdUsingPATCH(taskId: number, timelineRequest: TimelineRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TimelineResponse>>;
    public updateTimelineByIdUsingPATCH(taskId: number, timelineRequest: TimelineRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling updateTimelineByIdUsingPATCH.');
        }
        if (timelineRequest === null || timelineRequest === undefined) {
            throw new Error('Required parameter timelineRequest was null or undefined when calling updateTimelineByIdUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKey) required


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<TimelineResponse>(`${this.configuration.basePath}/tasks/timeline/${encodeURIComponent(String(taskId))}`,
            timelineRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
